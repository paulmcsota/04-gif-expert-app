{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACTC,mBAAS,IADA,mBACtCC,EADsC,KAC1BC,EAD0B,KAe7C,OACG,cAAC,WAAD,UACG,sBAAMC,SAVS,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAMd,SACG,uBACGO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,e,+BCPvBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DAEE,mCACTC,EAHO,iDAGyCC,UAAUH,GAHnD,6BAEE,oCAFF,SAIUI,MAAMF,GAJhB,cAIPG,EAJO,gBAKQA,EAASC,OALjB,uBAKNC,EALM,EAKNA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAX3B,kBAcNM,GAdM,4CAAH,sDCEAO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACjC,OACG,cAAC,WAAD,UACG,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,UCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACbd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAZAC,qBAAU,WACPxB,EAAQC,GACJwB,MAAK,SAAAC,GAEAH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAIrB,CAACpB,IAEGqB,EDZyBK,CAAa1B,GAAhCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAGrB,OACG,eAAC,WAAD,WACG,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEfjBgB,EAAe,WAAO,IAAD,EAEKzC,mBAAS,CAAC,cAFf,mBAExBQ,EAFwB,KAEZT,EAFY,KAI/B,OACG,eAAC,WAAD,WACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEMS,EAAWe,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxD4B,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.501c3994.chunk.js","sourcesContent":["import React, { Fragment, useState }from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n   const [inputValue, setInputValue] = useState('');\n\n   const handleInputChange = (e) => {\n      setInputValue(e.target.value);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      if( inputValue.trim().length > 2) {\n         setCategories( categories => [inputValue, ...categories]);\n         setInputValue('');\n      }\n   };\n   \n   return (\n      <Fragment>\n         <form onSubmit={handleSubmit}>\n            <input \n               type=\"text\"\n               value={inputValue}\n               onChange={handleInputChange}\n               />\n         </form>\n      </Fragment>\n   )\n}\n\nAddCategory.propTypes = {\n   setCategories: PropTypes.func.isRequired,\n}","const getGifs = async(category) => {\n\n   const apiKey = 'UmKMRAxprKhMkvRnUzciwz7uAcmiGZSv';\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n   const response = await fetch(url);\n   const {data} = await response.json();\n\n   const gifs = data.map(img => {\n      return {\n         id: img.id,\n         title: img.title,\n         url: img.images?.downsized_medium.url,\n      }\n   });\n   return gifs;\n}\n\nexport {\n   getGifs\n}","import React, { Fragment } from 'react';\n\nexport const GifGridItem = ({title, url}) => {\n   return (\n      <Fragment>\n         <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n         </div>\n      </Fragment>\n   );\n}\n","import React, { Fragment /*, useState, useEffect*/ } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n   \n\n   const {data: images, loading} = useFetchGifs(category);\n\n\n   return (\n      <Fragment>\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n         {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n         <div className=\"card-grid\">\n            {\n               images.map(img => (\n                  <GifGridItem\n                     key={img.id}\n                     {...img}\n                  />\n               ))\n            }\n         </div>\n      </Fragment>\n   )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n   const [state, setState] = useState({\n      data: [],\n      loading: true,\n   });\n   useEffect(() => {\n      getGifs(category)\n         .then(imgs => {\n            // setTimeout(() => {\n               setState({\n                  data: imgs,\n                  loading: false,            \n               });\n            // }, 1500);\n         });\n   }, [category]);\n\n   return state;\n}","import React, { Fragment, useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n   \n   const [categories, setCategories] = useState(['One punch']);\n\n   return (\n      <Fragment>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={setCategories} />\n         <hr />\n         <ol>\n            {\n               categories.map(category => <GifGrid key={category} category={category} />)\n            }\n         </ol>\n      </Fragment>\n   );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n   <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}